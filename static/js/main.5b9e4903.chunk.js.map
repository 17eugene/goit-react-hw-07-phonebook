{"version":3,"sources":["ContactList/ContactList.module.css","Filter/Filter.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/store.js","redux/contacts/contacts-operations.js","AddForm/AddForm.js","redux/contacts/contacts-selectors.js","ContactList/ContactList.js","Filter/Filter.js","App.js","index.js","AddForm/AddForm.module.css"],"names":["module","exports","actions","getContactsRequest","createAction","getContactsSuccess","getContactsError","addContactsRequest","addContactsSuccess","addContactsError","deleteContactsRequest","deleteContactsSuccess","deleteContactsError","changeFilter","itemsReducer","createReducer","_","action","payload","state","filter","contact","id","filterReducer","combineReducers","items","middleware","getDefaultMiddleware","serializableCheck","rootReducer","contacts","contactsReducer","store","configureStore","reducer","devTools","process","axios","defaults","baseURL","operations","getContacts","dispatch","get","then","data","catch","error","addContact","info","post","deleteContact","delete","connect","submitHandler","contactsOperations","useState","name","setName","number","setNumber","inputChange","e","currentTarget","value","className","styles","form","onSubmit","preventDefault","label","input","type","onChange","pattern","title","required","add_btn","getFiltredContacts","getFilter","normalized","toLowerCase","includes","useDispatch","useSelector","useEffect","contact_list","map","delete_btn","onClick","onDeleteContact","contactsActions","filter_wrapper","filter_label","filter_input","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,aAAe,kCAAkC,QAAU,6BAA6B,WAAa,kC,mBCAvHD,EAAOC,QAAU,CAAC,aAAe,6BAA6B,eAAiB,+BAA+B,aAAe,+B,gICyC9GC,EAbC,CACdC,mBAzByBC,YAAa,+BA0BtCC,mBAzByBD,YAAa,+BA0BtCE,iBAzBuBF,YAAa,6BA0BpCG,mBAxByBH,YAAa,+BAyBtCI,mBAxByBJ,YAAa,+BAyBtCK,iBAxBuBL,YAAa,6BAyBpCM,sBAvB4BN,YAAa,kCAwBzCO,sBAvB4BP,YAAa,kCAwBzCQ,oBAvB0BR,YAAa,gCAwBvCS,aArBmBT,YAAa,0BCZ5BU,EAAeC,YAAc,IAAD,mBAC/Bb,EAAQG,oBAAqB,SAACW,EAAGC,GAAJ,OAAeA,EAAOC,WADpB,cAE/BhB,EAAQM,oBAAqB,SAACW,EAAOF,GACpC,MAAM,CAAEA,EAAOC,SAAf,mBAA2BC,OAHG,cAM/BjB,EAAQS,uBAAwB,SAACQ,EAAOF,GAAR,OAC/BE,EAAMC,QAAO,SAACC,GAAD,OAAaA,EAAQC,KAAOL,EAAOC,cAPlB,IAU5BK,EAAgBR,YAAc,GAAD,eAChCb,EAAQW,cAAe,SAACG,EAAGC,GAAJ,OAAeA,EAAOC,YAGjCM,cAAgB,CAC7BC,MAAOX,EACPM,OAAQG,ICIJG,EAAU,YACXC,YAAqB,CACtBC,mBAAmB,KAUjBC,EAAcL,YAAgB,CAElCM,SAAUC,IAGNC,EAAQC,YAAe,CAC3BC,QAASL,EACTH,aACAS,UAAUC,I,+BC1CZC,IAAMC,SAASC,QAAU,yBAEzB,IAoCeC,EANI,CACjBC,YA/BkB,kBAAM,SAACC,GACzBA,EAASxC,EAAQC,oBAEjBkC,IACGM,IAAI,aACJC,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcH,EAASxC,EAAQG,mBAAmBwC,OACvDC,OAAM,SAACC,GAAD,OAAWL,EAASxC,EAAQI,iBAAiByC,SA0BtDC,WAvBiB,SAACC,GAAD,OAAU,SAACP,GAC5B,IAAMrB,EAAU,CACd4B,QAEFP,EAASxC,EAAQK,sBAEjB8B,IACGa,KAAK,YAAa7B,GAClBuB,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcH,EAASxC,EAAQM,mBAAmBqC,OACvDC,OAAM,SAACC,GAAD,OAAWL,EAASxC,EAAQO,iBAAiBsC,SAetDI,cAZoB,SAAC7B,GAAD,OAAQ,SAACoB,GAC7BA,EAASxC,EAAQQ,uBAEjB2B,IACGe,OADH,oBACuB9B,IACpBsB,KAAKF,EAASxC,EAAQS,sBAAsBW,KAC5CwB,OAAM,SAACC,GAAD,OAAWL,EAASxC,EAAQU,oBAAoBmC,U,uBCsC3D,IAmEeM,cAAQ,MAnEI,SAACX,GAAD,MAAe,CACxCY,cAAe,SAACL,GAAD,OAAUP,EAASa,EAAmBP,WAAWC,QAkEnDI,EApIf,YAAqC,IAAlBC,EAAiB,EAAjBA,cACjB,EAAwBE,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAEMC,EAAc,SAACC,GACnB,OAAQA,EAAEC,cAAcN,MACtB,IAAK,OACHC,EAAQI,EAAEC,cAAcC,OACxB,MAEF,IAAK,SACHJ,EAAUE,EAAEC,cAAcC,OAC1B,MAEF,QACE,SAWN,OACE,8BACE,uBAAMC,UAAWC,IAAOC,KAAMC,SATf,SAACN,GAClBA,EAAEO,iBACFf,EAAc,CAAEG,KAAMA,EAAME,OAAQA,IACpCD,EAAQ,IACRE,EAAU,KAKR,UACE,wBAAOK,UAAWC,IAAOI,MAAzB,iBAEE,uBACEL,UAAWC,IAAOK,MAClBC,KAAK,OACLC,SAAUZ,EACVJ,KAAK,OACLO,MAAOP,EACPiB,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,OAIZ,wBAAOX,UAAWC,IAAOC,KAAzB,mBAEE,uBACEF,UAAWC,IAAOK,MAClBC,KAAK,MACLf,KAAK,SACLO,MAAOL,EACPc,SAAUZ,EACVa,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,OAIZ,wBAAQJ,KAAK,SAASP,UAAWC,IAAOW,QAAxC,iCC5DKC,EAAqB,SAAC3D,GACjC,IAAMW,EAJmB,SAACX,GAAD,OAAWA,EAAMW,SAASL,MAIlCgB,CAAYtB,GACvBC,EAJiB,SAACD,GAAD,OAAWA,EAAMW,SAASV,OAIlC2D,CAAU5D,GACnB6D,EAAa5D,EAAO6D,cAE1B,OAAOnD,EAASV,QAAO,SAACC,GAAD,OACrBA,EAAQ4B,KAAKQ,KAAKwB,cAAcC,SAASF,O,iBC8C9B3B,kBAAQ,KAAM,KAAdA,EA/Cf,WACE,IAAMX,EAAWyC,cACXrD,EAAWsD,YAAYN,GAS7B,OAJAO,qBAAU,WACR3C,EAASa,EAAmBd,iBAC3B,CAACC,IAGF,oBAAIuB,UAAWC,IAAOoB,aAAtB,SACGxD,EAASyD,KAAI,gBAAGtC,EAAH,EAAGA,KAAM3B,EAAT,EAASA,GAAT,OACZ,qBAAa2C,UAAWC,IAAO7C,QAA/B,UACE,8BACG4B,EAAKQ,KADR,KACe,+BAAOR,EAAKU,YAE3B,wBACEa,KAAK,SACLP,UAAWC,IAAOsB,WAClBC,QAAS,YAjBK,SAACnE,GACvBoB,EAASa,EAAmBJ,cAAc7B,IAiBhCoE,CAAgBpE,IAJpB,sBAJOA,W,iBCAjB,IASe+B,eATS,SAAClC,GAAD,MAAY,CAClCC,OAAQD,EAAMW,SAASV,WAGE,SAACsB,GAAD,MAAe,CACxC+B,SAAU,SAACX,GAAD,OACRpB,EAASiD,EAAgB9E,aAAaiD,EAAEC,cAAcC,YAG3CX,EA1Bf,YAAsC,IAApBW,EAAmB,EAAnBA,MAAOS,EAAY,EAAZA,SACvB,OACE,qBAAKR,UAAWC,IAAO0B,eAAvB,SACE,wBAAO3B,UAAWC,IAAO2B,aAAzB,iCAEE,uBACErB,KAAK,OACLf,KAAK,SACLQ,UAAWC,IAAO4B,aAClB9B,MAAOA,EACPS,SAAUA,Y,MCPpB,SAASsB,IAeP,OACE,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,OCpBNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUlE,MAAOA,EAAjB,SAEE,cAAC+D,EAAD,QAIJI,SAASC,eAAe,U,kBCd1BpG,EAAOC,QAAU,CAAC,KAAO,sBAAsB,QAAU,yBAAyB,MAAQ,uBAAuB,MAAQ,0B","file":"static/js/main.5b9e4903.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact_list\":\"ContactList_contact_list__31R9l\",\"contact\":\"ContactList_contact__3g3HW\",\"delete_btn\":\"ContactList_delete_btn__1o5hh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter_label\":\"Filter_filter_label__3ov45\",\"filter_wrapper\":\"Filter_filter_wrapper__1kjVB\",\"filter_input\":\"Filter_filter_input__2lIBq\"};","// import types from \"./contacts-types\";\r\n// import shortid from \"shortid\";\r\n\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst getContactsRequest = createAction(\"contacts/getContactsRequest\");\r\nconst getContactsSuccess = createAction(\"contacts/getContactsSuccess\");\r\nconst getContactsError = createAction(\"contacts/getContactsError\");\r\n\r\nconst addContactsRequest = createAction(\"contacts/addContactsRequest\");\r\nconst addContactsSuccess = createAction(\"contacts/addContactsSuccess\");\r\nconst addContactsError = createAction(\"contacts/addContactsError\");\r\n\r\nconst deleteContactsRequest = createAction(\"contacts/deleteContactsRequest\");\r\nconst deleteContactsSuccess = createAction(\"contacts/deleteContactsSuccess\");\r\nconst deleteContactsError = createAction(\"contacts/deleteContactsError\");\r\n\r\n// const deleteContact = createAction(\"contacts/delete\");\r\nconst changeFilter = createAction(\"contacts/changeFilter\");\r\n\r\n//const addContact = createAction(\"contacts/add\", (data) => {\r\n//return {\r\n//payload: {\r\n//id: shortid.generate(),\r\n//...data,\r\n//},\r\n//};\r\n//});\r\n\r\nconst actions = {\r\n  getContactsRequest,\r\n  getContactsSuccess,\r\n  getContactsError,\r\n  addContactsRequest,\r\n  addContactsSuccess,\r\n  addContactsError,\r\n  deleteContactsRequest,\r\n  deleteContactsSuccess,\r\n  deleteContactsError,\r\n  changeFilter,\r\n};\r\n\r\nexport default actions;\r\n\r\n//================================vanila redux\r\n// const addContact = (data) => ({\r\n//   type: types.ADD,\r\n//   payload: {\r\n//     id: shortid.generate(),\r\n//     ...data,\r\n//   },\r\n// });\r\n\r\n// const deleteContact = (contactId) => ({\r\n//   type: types.DELETE,\r\n//   payload: contactId,\r\n// });\r\n\r\n// const changeFilter = (value) => ({\r\n//   type: types.CHANGE_FILTER,\r\n//   payload: value,\r\n// });\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\n// import types from \"./contacts-types\";\r\n\r\nimport actions from \"./contacts-actions\";\r\n\r\nconst itemsReducer = createReducer([], {\r\n  [actions.getContactsSuccess]: (_, action) => action.payload,\r\n  [actions.addContactsSuccess]: (state, action) => {\r\n    return [action.payload, ...state];\r\n  },\r\n\r\n  [actions.deleteContactsSuccess]: (state, action) =>\r\n    state.filter((contact) => contact.id !== action.payload),\r\n});\r\n\r\nconst filterReducer = createReducer(\"\", {\r\n  [actions.changeFilter]: (_, action) => action.payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items: itemsReducer,\r\n  filter: filterReducer,\r\n});\r\n\r\n//========================vanila redux\r\n// const itemsReducer = (state = [], action) => {\r\n//   switch (action.type) {\r\n//     case types.ADD:\r\n//       if (\r\n//         state.find(\r\n//           (contact) =>\r\n//             contact.number === action.payload.number ||\r\n//             contact.name.toLowerCase() === action.payload.name.toLowerCase()\r\n//         )\r\n//       ) {\r\n//         alert(\"Contact already exist!\");\r\n//         return;\r\n//       }\r\n//       return [action.payload, ...state];\r\n\r\n//     case types.DELETE:\r\n//       return state.filter((contact) => contact.id !== action.payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filterReducer = (state = \"\", action) => {\r\n//   switch (action.type) {\r\n//     case \"contacts/changeFilter\":\r\n//       return action.payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n","// import { combineReducers } from \"redux\";\r\n// import { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport {\r\n  configureStore,\r\n  combineReducers,\r\n  getDefaultMiddleware,\r\n} from \"@reduxjs/toolkit\";\r\n// import {\r\n//   // persistReducer,\r\n//   // persistStore,\r\n//   PAUSE,\r\n//   REHYDRATE,\r\n//   PERSIST,\r\n//   PURGE,\r\n//   FLUSH,\r\n// } from \"redux-persist\";\r\n// import storage from \"redux-persist/lib/storage\";\r\n\r\nimport contactsReducer from \"./contacts/contacts-reducer\";\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactsReducer,\r\n// });\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: false,\r\n  }),\r\n];\r\n\r\n// const persistConfig = {\r\n//   key: \"contacts\",\r\n//   storage,\r\n//   blacklist: [\"filter\"],\r\n// };\r\n\r\nconst rootReducer = combineReducers({\r\n  //contacts: persistReducer(persistConfig, contactsReducer), //персистим contactsReducer чтобы изолироваться от фильтра в localeStorage\r\n  contacts: contactsReducer,\r\n});\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\n// const persistor = persistStore(store);\r\n\r\nexport { store };\r\n","import axios from \"axios\";\r\n\r\nimport actions from \"./contacts-actions\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:3000/\";\r\n\r\nconst getContacts = () => (dispatch) => {\r\n  dispatch(actions.getContactsRequest);\r\n\r\n  axios\r\n    .get(\"/contacts\")\r\n    .then(({ data }) => dispatch(actions.getContactsSuccess(data)))\r\n    .catch((error) => dispatch(actions.getContactsError(error)));\r\n};\r\n\r\nconst addContact = (info) => (dispatch) => {\r\n  const contact = {\r\n    info,\r\n  };\r\n  dispatch(actions.addContactsRequest());\r\n\r\n  axios\r\n    .post(\"/contacts\", contact)\r\n    .then(({ data }) => dispatch(actions.addContactsSuccess(data)))\r\n    .catch((error) => dispatch(actions.addContactsError(error)));\r\n};\r\n\r\nconst deleteContact = (id) => (dispatch) => {\r\n  dispatch(actions.deleteContactsRequest);\r\n\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(dispatch(actions.deleteContactsSuccess(id)))\r\n    .catch((error) => dispatch(actions.deleteContactsError(error)));\r\n};\r\n\r\nconst operations = {\r\n  getContacts,\r\n  addContact,\r\n  deleteContact,\r\n};\r\n\r\nexport default operations;\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport contactsOperations from \"../redux/contacts/contacts-operations\";\r\nimport styles from \"./AddForm.module.css\";\r\n\r\nfunction AddForm({ submitHandler }) {\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n\r\n  const inputChange = (e) => {\r\n    switch (e.currentTarget.name) {\r\n      case \"name\":\r\n        setName(e.currentTarget.value);\r\n        break;\r\n\r\n      case \"number\":\r\n        setNumber(e.currentTarget.value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const formSubmit = (e) => {\r\n    e.preventDefault();\r\n    submitHandler({ name: name, number: number });\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form className={styles.form} onSubmit={formSubmit}>\r\n        <label className={styles.label}>\r\n          Name\r\n          <input\r\n            className={styles.input}\r\n            type=\"text\"\r\n            onChange={inputChange}\r\n            name=\"name\"\r\n            value={name}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </label>\r\n\r\n        <label className={styles.form}>\r\n          Number\r\n          <input\r\n            className={styles.input}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            value={number}\r\n            onChange={inputChange}\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n          />\r\n        </label>\r\n\r\n        <button type=\"submit\" className={styles.add_btn}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  submitHandler: (info) => dispatch(contactsOperations.addContact(info)),\r\n});\r\n\r\n// class AddForm extends React.Component {\r\n//   constructor() {\r\n//     super();\r\n\r\n//     this.state = {\r\n//       name: \"\",\r\n//       number: \"\",\r\n//     };\r\n//   }\r\n\r\n//   handleChange = (e) => {\r\n//     this.setState({\r\n//       [e.currentTarget.name]: e.currentTarget.value, //в значение артибута 'name' у инпута положиди знаение 'value'\r\n//     });\r\n//   };\r\n\r\n//   handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     this.props.submitHandler(this.state);\r\n//     this.setState({ name: \"\", number: \"\" });\r\n//   };\r\n\r\n//   render() {\r\n//     return (\r\n//       <div>\r\n//         <form className={styles.form} onSubmit={this.handleSubmit}>\r\n//           <label className={styles.label}>\r\n//             Name\r\n//             <input\r\n//               className={styles.input}\r\n//               type=\"text\"\r\n//               onChange={this.handleChange}\r\n//               name=\"name\"\r\n//               value={this.state.name}\r\n//               pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//               title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n//               required\r\n//             />\r\n//           </label>\r\n\r\n//           <label className={styles.form}>\r\n//             Number\r\n//             <input\r\n//               className={styles.input}\r\n//               type=\"tel\"\r\n//               name=\"number\"\r\n//               value={this.state.number}\r\n//               onChange={this.handleChange}\r\n//               pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//               title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//               required\r\n//             />\r\n//           </label>\r\n\r\n//           <button type=\"submit\" className={styles.add_btn}>\r\n//             Add contact\r\n//           </button>\r\n//         </form>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\nexport default connect(null, mapDispatchToProps)(AddForm);\r\n","export const getContacts = (state) => state.contacts.items;\r\nexport const getFilter = (state) => state.contacts.filter;\r\n\r\nexport const getFiltredContacts = (state) => {\r\n  const contacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n  const normalized = filter.toLowerCase();\r\n\r\n  return contacts.filter((contact) =>\r\n    contact.info.name.toLowerCase().includes(normalized)\r\n  );\r\n};\r\n","import { connect } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getFiltredContacts } from \"../redux/contacts/contacts-selectors\";\r\n\r\nimport contactsOperations from \"../redux/contacts/contacts-operations\";\r\nimport styles from \"./ContactList.module.css\";\r\n\r\nfunction ContactList() {\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(getFiltredContacts);\r\n\r\n  const onDeleteContact = (id) =>\r\n    dispatch(contactsOperations.deleteContact(id));\r\n\r\n  useEffect(() => {\r\n    dispatch(contactsOperations.getContacts());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <ul className={styles.contact_list}>\r\n      {contacts.map(({ info, id }) => (\r\n        <li key={id} className={styles.contact}>\r\n          <p>\r\n            {info.name}: <span>{info.number}</span>\r\n          </p>\r\n          <button\r\n            type=\"button\"\r\n            className={styles.delete_btn}\r\n            onClick={() => {\r\n              onDeleteContact(id);\r\n            }}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\n// const mapStateToProps = (state) => {\r\n//   const visibleContacts = getFiltredContacts(\r\n//     state.contacts.items,\r\n//     state.contacts.filter\r\n//   );\r\n//   return {\r\n//     contacts: visibleContacts,\r\n//   };\r\n// };\r\n\r\n// const mapDispatchToProps = (dispatch) => ({\r\n//   onDeleteContact: (id) => dispatch(contactsOperations.deleteContact(id)),\r\n// });\r\n\r\nexport default connect(null, null)(ContactList);\r\n","import { connect } from \"react-redux\";\r\n\r\nimport styles from \"./Filter.module.css\";\r\nimport contactsActions from \"../redux/contacts/contacts-actions\";\r\n\r\nfunction Filter({ value, onChange }) {\r\n  return (\r\n    <div className={styles.filter_wrapper}>\r\n      <label className={styles.filter_label}>\r\n        Find contact by name\r\n        <input\r\n          type=\"text\"\r\n          name=\"filter\"\r\n          className={styles.filter_input}\r\n          value={value}\r\n          onChange={onChange}\r\n        />\r\n      </label>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  filter: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onChange: (e) =>\r\n    dispatch(contactsActions.changeFilter(e.currentTarget.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","// import React, { useState, useEffect } from \"react\";\r\n// import shortid from \"shortid\";\r\nimport AddForm from \"./AddForm/AddForm\";\r\nimport ContactList from \"./ContactList/ContactList\";\r\nimport Filter from \"./Filter/Filter\";\r\n\r\nimport \"./index.css\";\r\n\r\nfunction App() {\r\n  // useEffect(() => {\r\n  //   // localStorage.setItem(\"contacts\", JSON.stringify(contacts));\r\n  //   const parsedData = JSON.parse(localStorage.getItem(\"contacts\"));\r\n  //   if (parsedData) {\r\n  //     setContacts(parsedData);\r\n  //   } else {\r\n  //     return;\r\n  //   }\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   localStorage.setItem(\"contacts\", JSON.stringify(contacts));\r\n  // });\r\n\r\n  return (\r\n    <div>\r\n      <AddForm />\r\n      <Filter />\r\n      <ContactList />\r\n    </div>\r\n  );\r\n}\r\n\r\n// class App extends React.Component {\r\n//   constructor() {\r\n//     super();\r\n\r\n//     this.state = {\r\n//       contacts: [\r\n//         { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\r\n//         { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\r\n//         { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\r\n//         { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\r\n//       ],\r\n//       filter: \"\",\r\n//     };\r\n//   }\r\n\r\n//   componentDidMount() {\r\n//     const parsedData = JSON.parse(localStorage.getItem(\"contacts\"));\r\n//     if (parsedData) {\r\n//       this.setState({ contacts: parsedData });\r\n//     }\r\n//   }\r\n\r\n//   componentDidUpdate(prevProps, prevState) {\r\n//     if (this.state.contacts !== prevState.contacts) {\r\n//       localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\r\n//     }\r\n//   }\r\n\r\n//   formSubmitHandler = (data) => {\r\n//     //data - объект, состоящий из имени номера, которые прокинули из формы.\r\n//     let newContact = {\r\n//       id: shortid.generate(),\r\n//       ...data,\r\n//     };\r\n\r\n//     if (\r\n//       this.state.contacts.find(\r\n//         (contact) =>\r\n//           contact.number === data.number ||\r\n//           contact.name.toLowerCase() === data.name.toLowerCase()\r\n//       )\r\n//     ) {\r\n//       alert(\"Contact already exist!\");\r\n//       return;\r\n//     }\r\n\r\n//     this.setState((prevState) => ({\r\n//       contacts: [newContact, ...prevState.contacts],\r\n//     }));\r\n//   };\r\n\r\n//   deleteContact = (contactId) => {\r\n//     this.setState((prevState) => ({\r\n//       contacts: prevState.contacts.filter(\r\n//         (contact) => contact.id !== contactId\r\n//       ),\r\n//     }));\r\n//   };\r\n\r\n//   filterChange = (e) => {\r\n//     this.setState({ filter: e.currentTarget.value });\r\n//   };\r\n\r\n//   getFiltredContacts = () => {\r\n//     const normalized = this.state.filter.toLowerCase();\r\n\r\n//     return this.state.contacts.filter((contact) =>\r\n//       contact.name.toLowerCase().includes(normalized)\r\n//     );\r\n//   };\r\n\r\n//   render() {\r\n//     let filtredContacts = this.getFiltredContacts();\r\n//     return (\r\n//       <div>\r\n//         <AddForm submitHandler={this.formSubmitHandler} />\r\n//         <Filter value={this.state.filter} onChange={this.filterChange} />\r\n//         <ContactList\r\n//           contacts={filtredContacts}\r\n//           onDeleteContact={this.deleteContact}\r\n//         />\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\nexport { App };\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { store } from \"./redux/store\";\r\nimport { App } from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\n// import { PersistGate } from \"redux-persist/integration/react\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      {/* <PersistGate loading={null} persistor={persistor}> */}\r\n      <App />\r\n      {/* </PersistGate> */}\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"AddForm_form__2modB\",\"add_btn\":\"AddForm_add_btn__QaJ91\",\"label\":\"AddForm_label__2uigf\",\"input\":\"AddForm_input__YPxlt\"};"],"sourceRoot":""}